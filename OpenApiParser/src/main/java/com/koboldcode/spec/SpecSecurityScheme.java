package com.koboldcode.spec;

import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Defines a security scheme that can be used by the operations.
 * <p>
 * Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter),
 *  mutual TLS (use of a client certificate), OAuth2's common flows (implicit, password, client credentials and
 *  authorization code) as defined in <a href="https://tools.ietf.org/html/rfc6749">RFC6749</a>, and
 *  <a href="https://tools.ietf.org/html/draft-ietf-oauth-discovery-06">OpenID Connect Discovery</a>.
 * <p>
 * Please note that as of 2020, the implicit flow is about to be deprecated by
 *  <a href="https://tools.ietf.org/html/draft-ietf-oauth-security-topics">OAuth 2.0 Security Best Current Practice</a>.
 *  Recommended for most use case is Authorization Code Grant flow with PKCE.
 * <p>
 * This object MAY be extended with
 *  <a href="https://swagger.io/specification/#specification-extensions">Specification Extensions.</a>
 *
 * @author Kirk O'Bannon, with original documentation from
 *  <a href="https://swagger.io/specification/#openapi-document">OpenApi Specification</a>
 */
@Data @NoArgsConstructor
public class SpecSecurityScheme extends SpecExtensions {
    /**
     * <b>REQUIRED</b>. The type of the security scheme.
     * @see SpecSecuritySchemeType
     */
    private SpecSecuritySchemeType type;
    /**
     * A description for security scheme.
     *  <a href="https://spec.commonmark.org/">CommonMark</a> MAY be used for rich text representation.
     */
    private String description;
    /**
     * <b>REQUIRED</b> if {@link SpecSecurityScheme#type} is {@code "apikey"}, otherwise this field is ignored.
     * <p>
     * The name of the header, query or cookie parameter to be used.
     */
    private String name;
    /**
     * <b>REQUIRED</b> if {@link SpecSecurityScheme#type} is {@code "apikey"}, otherwise this field is ignored.
     * <p>
     * The location of the API key ({@code "query"}, {@code "header"}, {@code "cookie"})
     * @see SpecSecuritySchemeIn
     */
    private SpecSecuritySchemeIn in;
    /**
     * <b>REQUIRED</b> if {@link SpecSecurityScheme#type} is {@code "http"}, otherwise this field is ignored.
     * <p>
     * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in
     *  <a href="https://tools.ietf.org/html/rfc7235#section-5.1">RFC7235</a>.
     * The values used SHOULD be registered in the
     * <a href="https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml">IANA Authentication Scheme Registry</a>
     */
    private String scheme;
    /**
     * Applies if {@link SpecSecurityScheme#type} is {@code "http"} of {@code "bearer"}, otherwise this field is ignored.
     * <p>
     * A hint to the client to identify how the bearer token is formatted.
     *  Bearer tokens are usually generated by an authorization server,
     *  so this information is primarily for documentation purposes.
     */
    private String bearerFormat;
    /**
     * <b>REQUIRED</b> if {@link SpecSecurityScheme#type} is {@code "oauth2"}, otherwise this field is ignored.
     * <p>
     * An object containing configuration information for the flow types supported.
     */
    private SpecOAuthFlows flows;
    /**
     * <b>REQUIRED</b> if {@link SpecSecurityScheme#type} is {@code "openIdConnect"}, otherwise this field is ignored.
     * <p>
     * OpenId Connect URL to discover OAuth2 configuration values.
     * This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.
     */
    private String openIdConnectUrl;

    public enum SpecSecuritySchemeType {
        API_KEY("apiKey"),
        HTTP("http"),
        MUTUAL_TLS("mutualTLS"),
        OAUTH2("oauth2"),
        OPEN_ID_CONNECT("openIdConnect");

        private final String value;
        SpecSecuritySchemeType(String val) {
            this.value = val;
        }
    }
    public enum SpecSecuritySchemeIn {
        QUERY("query"),
        HEADER("header"),
        COOKIE("cookie");

        private final String value;
        SpecSecuritySchemeIn(String val) {
            this.value = val;
        }
    }
}
